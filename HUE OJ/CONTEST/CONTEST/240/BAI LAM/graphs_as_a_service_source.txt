#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
#define PB push_back
#define MP make_pair
#define st first
#define nd second
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())

#define unordered_map __fast_unordered_map
template<class Key, class Value, class Hash = std::hash<Key>>
using unordered_map = __gnu_pbds::gp_hash_table<Key, Value, Hash>;

template<class C> void mini(C &a4, C b4) { a4 = min(a4, b4); }
template<class C> void maxi(C &a4, C b4) { a4 = max(a4, b4); }

template<class TH> void _dbg(const char *sdbg, TH h){ cerr<<sdbg<<'='<<h<<endl; }
template<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {
  while(*sdbg!=',')cerr<<*sdbg++;
  cerr<<'='<<h<<','; _dbg(sdbg+1, a...);
}

template<class T> ostream &operator<<(ostream& os, vector<T> V) {
  os << "["; for (auto vv : V) os << vv << ","; return os << "]";
}
template<class L, class R> ostream &operator<<(ostream &os, pair<L,R> P) {
  return os << "(" << P.st << "," << P.nd << ")";
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#else
#define debug(...) (__VA_ARGS__)
#define cerr if(0)cout
#endif

using ll = long long;
using vi = vector<int>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vll = vector<ll>;
using ld = long double;

struct Testcase {
  int tidx_;

  Testcase(int idx) : tidx_(idx) {}

  void Run() {
    int n, m;
    scanf("%d%d", &n, &m);

    vector<vi> dists(n+1, vi(n+1, 1e9));
    for (int i = 0; i < n; ++i) { dists[i][i] = 0; }

    vector<tuple<int, int, int>> reqs;
    for (int i = 0; i < m; ++i) {
      int a, b, c;
      scanf("%d%d%d", &a, &b, &c);
      dists[a][b] = dists[b][a] = c;
      reqs.emplace_back(a, b, c);
    }

    for (int k = 1; k <= n; ++k) {
      for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
          mini(dists[i][j], dists[i][k] + dists[k][j]);
        }
      }
    }

    bool fail = false;
    for (auto &&[a, b, c] : reqs) {
      if (dists[a][b] != c) { fail = true; }
    }

    printf("Case #%d: ", tidx_);
    if (fail) {
      printf("Impossible\n");
    } else {
      printf("%d\n", m);
      for (auto &&[a,b,c] : reqs) {
        printf("%d %d %d\n", a, b, c);
      }
    }
  }
};

int32_t main() {
  int t;
  scanf("%d", &t);
  for (int i = 1; i <= t; ++i) {
    Testcase(i).Run();
  }
}

